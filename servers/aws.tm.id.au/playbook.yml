
####### IN PROGRESS! DO NOT USE YET. #######

# TODO: Split up into separate files for related groups of tasks.

# TODO: Support CentOS as well as Ubuntu (see ansible_os_family, ansible_pkg_mgr, ansible_distribution, ansible_distribution_file_variety, ansible_distribution_release, and ansible_distribution_version vars for help).

# TODO: Work out how to determine whether the system was created today or not, and use that to determine whether a dist-upgrade should be run. Running `sudo tune2fs -l /dev/xvda1 | grep created` should give the created date of the filesystem which is a pretty good way to determine system age, and then there's a bunch of useful facts in {{ansible_date_time}} to compare to current.

- hosts: default
  become: yes
  gather_facts: no # This won't work until we install the needed Python module (see below).

  vars:
    username: tim
    full_name: Tim Malone
    timezone: Australia/Melbourne
    ssh_key: https://raw.githubusercontent.com/tdmalone/dotfiles/master/ssh.pub
    shell: /bin/zsh
    hostname: aws.tm.id.au
    dist_upgrade: false # WARNING: Should only be used on brand new servers!
    ssh_port: "{{ lookup('env', 'SSH_PORT') }}"

  handlers:

  - name: restart sshd
    service:
      name: sshd
      state: restarted

  pre_tasks:

    # @see https://stackoverflow.com/a/34402816/1982136
    # @see http://docs.ansible.com/ansible/latest/modules/raw_module.html
    - name: Check if python-simplejson is installed.
      raw: dpkg-query --show python-simplejson
      register: python_simplejson_installed
      failed_when: python_simplejson_installed.rc > 1
      changed_when: python_simplejson_installed.rc == 1
      check_mode: no # Run even in 'check' mode; the command is safe and we need the output.

    - name: If not, install python-simplejson for Ansible support.
      raw: sudo apt-get install --assume-yes python-simplejson
      when: "python_simplejson_installed.rc == 1"

    - name: Gather facts now that the needed Python module is installed.
      setup: # No args required.

  tasks:

    # @see http://docs.ansible.com/ansible/latest/modules/hostname_module.html
    - name: Set hostname to {{ hostname }}.
      hostname:
        name: "{{ hostname }}"

    - name: Add hostname to /etc/hosts.
      lineinfile:
        dest: /etc/hosts
        regexp: "^127.0.0.1"
        line: "127.0.0.1 {{ hostname }}"

    # @see http://docs.ansible.com/ansible/latest/modules/timezone_module.html
    - name: Set timezone to {{ timezone }}.
      timezone:
        name: "{{ timezone }}"

    # @see http://docs.ansible.com/ansible/latest/modules/group_module.html
    - name: Ensure groups are present.
      group:
        name: "{{ item }}"
      with_items:
        - "{{ username }}"
        - docker
        - sudo

    # @see http://docs.ansible.com/ansible/latest/modules/user_module.html
    - name: Add user {{ username }}.
      user:
        name: "{{ username }}"
        comment: "{{ full_name }}"
        group: "{{ username }}"
        shell: "{{ shell }}"
        groups: "{{ username }},docker,sudo"

    # @see http://docs.ansible.com/ansible/latest/modules/authorized_key_module.html
    # @see http://docs.ansible.com/ansible/latest/modules/lineinfile_module.html
    # @see https://github.com/vitalk/ansible-secure-ssh/blob/master/tasks/main.yml
    # @see https://www.cyberciti.biz/faq/how-to-disable-ssh-password-login-on-linux/
    - name: Add authorized_key for user {{ username }}.
      authorized_key:
        user: "{{ username }}"
        key: "{{ ssh_key }}"
      register: add_authorized_key

    - name: Change SSH port.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?Port"
        line: "Port {{ ssh_port }}"
      notify: restart sshd

    - name: Disable empty password login.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?PermitEmptyPasswords"
        line: "PermitEmptyPasswords no"
      notify: restart sshd

    - name: Disable remote root login.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"
      notify: restart sshd

    - name: Disable password login.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"
      notify: restart sshd

    - name: Enable public key authentication.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?PubkeyAuthentication"
        line: "PubkeyAuthentication yes"
      notify: restart sshd

    - name: Disable challenge response authentication.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?ChallengeResponseAuthentication"
        line: "ChallengeResponseAuthentication no"
      notify: restart sshd

    - name: Enable PAM.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?UsePAM"
        line: "UsePAM yes"
      notify: restart sshd

    # @see https://stackoverflow.com/a/37334415/1982136
    # @see http://docs.ansible.com/ansible/latest/modules/lineinfile_module.html
    - name: Allow 'sudo' group to have passwordless sudo.
      lineinfile:
        dest: /etc/sudoers
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL:ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'

    # TODO: Set up Papertrail monitoring.
    # @see https://github.com/reactiveops/ansible-papertrail
    # @see https://github.com/aptoma/ansible-papertrail
    # @see https://github.com/azavea/ansible-papertrail
    # @see PAPERTRAIL_HOST & PAPERTRAIL_PORT env vars.

    # TODO: Set up Datadog monitoring.
    # - include_role:
    #     name: Datadog.datadog
    #   vars:
    #     become: yes
    #     datadog_api_key: "{{ lookup('env', 'DATADOG_API_KEY') }}"

    # TODO: Copy across common Datadog configuration; restart Datadog agent.

    # TODO: Configure git.
    # @see http://docs.ansible.com/ansible/latest/modules/git_config_module.html

    # TODO: Clone tdmalone/dotfiles.
    # @see http://docs.ansible.com/ansible/latest/modules/git_module.html

    # Install Node.js.
    # @see https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
    #curl --location https://deb.nodesource.com/setup_9.x | sudo --preserve-env bash /dev/stdin
    #sudo apt-get install --assume-yes nodejs

    # TODO: Install Go.

    # TODO: Install RubyGems if it wasn't installed with Ruby.
    # @see https://rubygems.org/pages/download
    # wget https://rubygems.org/rubygems/rubygems-2.7.6.tgz

    # @see http://docs.ansible.com/ansible/latest/modules/apt_repository_module.html
    # @see https://cloud.google.com/sdk/docs/#deb
    # @see https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-apt?view=azure-cli-latest
    # @see https://devcenter.heroku.com/articles/heroku-cli#download-and-install
    # @see https://yarnpkg.com/en/docs/install
    # @see https://tecadmin.net/install-php-7-on-ubuntu/
    # @see http://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#latest-releases-via-apt-ubuntu
    # NOTE: {{ansible_lsb.codename}} will return eg. 'trusty' or 'xenial'. An alternative is {{ansible_distribution_release}}.
    - name: Add neccessary apt sources.
      apt_repository:
        repo: "{{ item }}"
      with_items:
        - deb https://packages.cloud.google.com/apt cloud-sdk-{{ ansible_lsb.codename }} main
        - deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ {{ ansible_lsb.codename }} main
        - deb https://cli-assets.heroku.com/branches/stable/apt ./
        - deb https://dl.yarnpkg.com/debian/ stable main
        - ppa:ondrej/php
        - ppa:ansible/ansible

    # @see http://docs.ansible.com/ansible/latest/modules/apt_key_module.html
    - name: Add neccessary apt keys.
      apt_key:
        url: "{{ item }}"
      with_items:
        - https://packages.cloud.google.com/apt/doc/apt-key.gpg
        - https://cli-assets.heroku.com/apt/release.key
        - https://dl.yarnpkg.com/debian/pubkey.gpg

    - name: Add Azure apt key.
      apt_key:
        keyserver: packages.microsoft.com
        id: 52E16F86FEE04B979B07E28DB02C46DF417A0893

    # @see http://docs.ansible.com/ansible/latest/modules/apt_module.html
    - name: Perform a full dist-upgrade.
      apt:
        upgrade: full
      when: dist_upgrade == true

    # @see http://docs.ansible.com/ansible/latest/modules/apt_module.html
    # @see https://packaging.python.org/guides/installing-using-linux-tools/#debian-ubuntu
    - name: Install packages with apt.
      apt:
        name: "{{ item }}"
        cache_valid_time: 86400 # One day. Set to avoid slowness when re-running/testing the playbook.
        autoclean: yes
        autoremove: yes
      with_items:
        - apt-transport-https
        - unzip
        - ansible
        #- google-cloud-sdk
        #- kubectl
        #- azure-cli
        #- nginx
        - bzip2
        - curl
        - ftp
        - mariadb-server
        #- heroku
        - nodejs
        #- yarn
        - php7.2
        - python3
        #- python3-venv # May not work on Ubuntu 14.04.
        - python3-pip
        - python-pip
        - ruby
        - zsh
        - git
        - vim
        - wget

    # @see http://docs.ansible.com/ansible/latest/modules/apt_module.html
    # - name: Install nginx.
    #   apt:
    #     name: nginx

    # @see https://chaosmail.github.io/programming/2015/03/04/install-deb-packages-in-ansible/
    # @see https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-manual-agent-install.html#agent-install-ubuntu
    # @see http://docs.ansible.com/ansible/latest/modules/command_module.html
    # @see http://docs.ansible.com/ansible/latest/modules/get_url_module.html
    - name: Check if amazon-ssm-agent is installed.
      command: dpkg-query --show amazon-ssm-agent
      register: amazon_ssm_agent_installed
      failed_when: amazon_ssm_agent_installed.rc > 1
      changed_when: amazon_ssm_agent_installed.rc == 1
      check_mode: no # Run even in 'check' mode; the command is safe and we need the output.

    - name: If not, ensure /home/{{ ansible_env.USER }}/downloads dir exists, then...
      file:
        path: /home/{{ ansible_env.USER }}/downloads
        state: directory
      when: amazon_ssm_agent_installed.rc == 1

    - name: ...download amazon-ssm-agent, and...
      get_url:
        url: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb
        dest: /home/{{ ansible_env.USER }}/downloads/amazon-ssm-agent.deb
      when: amazon_ssm_agent_installed.rc == 1

    - name: ...install amazon-ssm-agent.
      apt:
        deb: /home/{{ ansible_env.USER }}/downloads/amazon-ssm-agent.deb
      when: amazon_ssm_agent_installed.rc == 1

    # TODO: Install MariaDB.

    # TODO: Set up an nginx vhost, and configure with php-fpm.

    #- name: Start services on boot
    # sudo systemctl enable amazon-ssm-agent
    # sudo systemctl start amazon-ssm-agent

    # Install Travis CLI and enable autocomplete.
    # @see https://stackoverflow.com/a/44851034/1982136
    # TODO: Uncomment the below once Ruby/RubyGems setup is added.
    #sudo gem install travis
    #echo "y" | travis --version

    # Install Papertrail CLI.
    # @see https://github.com/papertrail/papertrail-cli
    # TODO: Uncomment the below once Ruby/RubyGems setup is added.
    #sudo gem install papertrail

    # TODO: Install LastPass CLI.

    # TODO: Install AWS CLI.

    # Install wp-cli.
    # @see https://wp-cli.org/#installing
    #curl --remote-name https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    #chmod +x wp-cli.phar
    #sudo mv wp-cli.phar /usr/local/bin/wp

    # Install Terraform.
    # TODO: Find a way to programmatically download or get the latest version number.
    #curl --location https://releases.hashicorp.com/terraform/0.11.5/terraform_0.11.5_linux_amd64.zip > terraform.zip
    #unzip terraform.zip
    #sudo mv terraform /usr/local/bin/terraform

    # Install Packer.
    # TODO: Find a way to programmatically download or get the latest version number.
    #curl --location https://releases.hashicorp.com/packer/1.2.2/packer_1.2.2_linux_amd64.zip > packer.zip
    #unzip packer.zip
    #sudo mv packer /usr/local/bin/packer

    # TODO: Install Vagrant.

    # TODO: Install minikube.
    # @see https://github.com/kubernetes/minikube/releases

    # Install IBM Cloud CLI.
    #wget https://clis.ng.bluemix.net/download/bluemix-cli/0.6.6/linux64
    #tar -zxvf linux64 && rm linux64
    #Bluemix_CLI/install_bluemix_cli

    # TODO: Set up HTTPS for nginx with a LetsEncrypt certificate.
    # @see http://docs.ansible.com/ansible/latest/modules/letsencrypt_module.html

    # TODO: Install and set up a local WordPress site to manage tm.id.au.
    # @see http://docs.ansible.com/ansible/latest/modules/mysql_db_module.html
    # @see http://docs.ansible.com/ansible/latest/modules/mysql_user_module.html
    # @see http://docs.ansible.com/ansible/latest/modules/blockinfile_module.html
    # @see http://docs.ansible.com/ansible/latest/modules/copy_module.html

    # TODO: Install zsh and oh-my-zsh.

    # TODO: Set up Cloud9 environment, if possible/neccessary?

    # TODO: Print out versions of everything that was installed; also serves as a check that they
    #       were installed properly.

    # @see http://docs.ansible.com/ansible/latest/modules/pip_module.html
    - name: Install datadog dependencies.
      pip:
        name: "{{ item }}"
      with_items:
        - datadog
        #- pyyaml

    # @see http://docs.ansible.com/ansible/latest/modules/datadog_event_module.html
    - name: Send Datadog event.
      datadog_event:
        title: Playbook run
        text: Successful playbook run on {{ ansible_nodename }} ({{ inventory_hostname }}).
        priority: low
        api_key: "{{ lookup('env', 'DATADOG_API_KEY') }}"
        app_key: "{{ lookup('env', 'DATADOG_APP_KEY') }}"
        tags: "#host:{{ ansible_nodename }}"

    # @see http://docs.ansible.com/ansible/latest/modules/slack_module.html
    # TODO: Possible to include stats about how the play went?
    # TODO: Possible to send a failure message if the play fails?
    # TODO: This appears to succeed even if the sending fails via Slack API, eg. with an invalid hook.
    - name: Send notification message via Slack.
      slack:
        token: "{{ lookup('env', 'SLACK_HOOK') }}"
        color: good
        msg: Playbook run on *{{ ansible_nodename }}* ({{ inventory_hostname }}) has completed successfully.
      delegate_to: localhost
